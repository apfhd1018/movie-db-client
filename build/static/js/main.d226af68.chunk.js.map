{"version":3,"sources":["components/Search.js","components/ResultList.js","components/Section/Favorite.js","components/Popup.js","components/Login.js","components/Register.js","components/FavoritePage.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","onChange","handleInput","onKeyPress","search","ref","inputRef","onClick","handleButton","SearchOutlined","Result","result","openPopup","setToggle","setClick","movieId","isClick","variable","userFrom","sessionStorage","getItem","accessToken","fetchLikeData","axios","post","headers","Authorization","then","res","data","success","likeData","console","log","lg","md","xs","imdbID","src","Poster","alt","Title","ResultList","results","SyncOutlined","spin","style","color","map","key","toggle","Favorite","movieTitle","moviePoster","useState","favorited","setFavorited","alert","Popup","closePopup","Year","display","position","imdbRating","Plot","Director","Actors","layout","labelCol","span","wrapperCol","tailLayout","Login","login","setLogin","openRegister","setChange","onLogin","values","a","setItem","refreshToken","userId","name","initialValues","remember","onFinish","Item","rules","required","message","prefix","UserOutlined","marginBottom","LockOutlined","htmlType","marginRight","marginLeft","width","Register","setRegister","onSubmit","label","Password","ArrowLeftOutlined","FavoritePage","favoriteMovies","setFavoriteMovies","useEffect","fetchFavoriteMovie","favorites","movie","index","title","shape","icon","DeleteOutlined","onClickRemove","danger","App","selected","moviedb","setMoviedb","register","favorite","setFavorite","change","useRef","apiURL","e","get","searchResults","prevState","openFavorite","token","logout","delete","removeItem","current","focus","value","typedTitle","target","id","popupResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"8SAwBeA,EArBA,SAACC,GACd,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,gBACb,2BACEC,KAAK,OACLC,YAAY,mFACZF,UAAU,YACVG,SAAUJ,EAAMK,YAChBC,WAAYN,EAAMO,OAClBC,IAAKR,EAAMS,WAEb,4BAAQC,QAASV,EAAMW,cACrB,kBAACC,EAAA,EAAD,CAAgBX,UAAU,gBAD5B,a,2CCNFY,EAAS,SAAC,GAOT,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,UACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,SAEAC,GACI,EAFJC,QAEI,EADJD,SAEME,EAAW,CACfC,SAAUC,eAAeC,QAAQ,UACjCL,QAASA,GAELM,EAAcF,eAAeC,QAAQ,eASrCE,EAAgB,WACpBC,IACGC,KAAK,4CAA6CP,EAAU,CAC3DQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,SACXhB,EAASc,EAAIC,KAAKE,UAClBC,QAAQC,IAAI,gBAAOL,EAAIC,KAAKC,UAE5BE,QAAQC,IAAI,+DAKpB,OACE,kBAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAItC,UAAU,UACpC,yBAAKS,QAzBW,WAClBK,EAAUD,EAAO0B,QACjBxB,GAAU,GACVS,MAuBI,yBAAKgB,IAAK3B,EAAO4B,OAAQC,IAAI,YAE/B,yBAAK1C,UAAU,eACb,4BAAKa,EAAO8B,UAyCLC,MAnCf,SAAoB7C,GAClB,OAAyB,IAArBA,EAAM8C,QAAQ,GAEd,yBAAK7C,UAAU,aACb,kBAAC8C,EAAA,EAAD,CAAcC,MAAI,IADpB,IACwB,6BADxB,yCAGE,6BAHF,UAIS,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,qBAKT,yBAAKjD,UAAU,wBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,KACGD,EAAM8C,QAAQK,KAAI,SAACrC,GAClB,OACE,kBAAC,EAAD,CACEA,OAAQA,EACRsC,IAAKtC,EAAO0B,OACZzB,UAAWf,EAAMe,UACjBsC,OAAQrD,EAAMqD,OACdrC,UAAWhB,EAAMgB,UACjBC,SAAUjB,EAAMiB,SAChBE,QAASnB,EAAMmB,QACfD,QAASJ,EAAO0B,gB,iBCQnBc,EAxFE,SAAC,GAOZ,EANJjC,SAMK,IALLH,EAKI,EALJA,QACAqC,EAII,EAJJA,WACAC,EAGI,EAHJA,YACAvC,EAEI,EAFJA,SACAE,EACI,EADJA,QACI,EAC8BsC,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,KAGEvC,EAAW,CACfC,SAAUC,eAAeC,QAAQ,UACjCL,QAASA,EACTqC,WAAYA,EACZC,YAAaA,GAEThC,EAAcF,eAAeC,QAAQ,eAG3CG,IACGC,KAAK,8CAA+CP,EAAU,CAC7DQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,QAEX0B,EAAa5B,EAAIC,KAAK0B,WAEtBE,MAAM,mEAgDZ,OACE,6BACE,yBAAK3D,UAAU,OACb,kBAAC,IAAD,CAAOkB,QAASA,EAAST,QA5CP,WAElBgD,EACFhC,IACGC,KACC,uDACAP,EACA,CACEQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAI9BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,SACXhB,GAAUyC,GACVC,GAAcD,IAEdvB,QAAQC,IAAI,mFAMlBV,IACGC,KAAK,kDAAmDP,EAAU,CACjEQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,SACXhB,GAAUyC,GACVC,GAAcD,IAEdvB,QAAQC,IAAI,iEAUhB,yBAAKnC,UAAU,OAAf,uBCnCO4D,MA/Cf,YAA4D,IAA3Cf,EAA0C,EAA1CA,QAASgB,EAAiC,EAAjCA,WAAY7C,EAAqB,EAArBA,SAAUE,EAAW,EAAXA,QAC9C,OACE,yBAAKlB,UAAU,SACb,yBAAKA,UAAU,gBACb,4BACG6C,EAAQF,MADX,KACoBE,EAAQiB,KAD5B,KAGA,yBAAKd,MAAO,CAAEe,QAAS,OAAQC,SAAU,aACvC,6BACE,uBAAGhE,UAAU,UAAb,YAAgC6C,EAAQoB,aAE1C,kBAAC,EAAD,CACE7C,SAAUC,eAAeC,QAAQ,UACjCL,QAAS4B,EAAQN,OACjBe,WAAYT,EAAQF,MACpBY,YAAaV,EAAQJ,OACrBzB,SAAUA,EACVE,QAASA,KAGb,yBAAKlB,UAAU,UACb,yBAAKwC,IAAKK,EAAQJ,OAAQC,IAAI,KAC9B,yBAAK1C,UAAU,gBACb,2BACE,sCADF,IACoB,6BACjB6C,EAAQqB,MAEX,2BACE,0CADF,IACwB,6BACrBrB,EAAQsB,UAEX,2BACE,uCADF,IACqB,6BAClBtB,EAAQuB,UAIf,yBAAKpE,UAAU,eACb,kBAAC,IAAD,CAAQC,KAAK,UAAUQ,QAASoD,GAAhC,a,6CCrCJQ,EAAS,CACbC,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,KAEhBE,EAAa,CACjBD,WAAY,CAAED,KAAM,KAsFPG,EAnFD,SAAC,GAAiD,EAA/CC,MAAgD,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAMxCC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEMxD,IAAMC,KACtB,wCACAsD,GAJU,OAENlD,EAFM,OAOZT,eAAe6D,QAAQ,cAAepD,EAAIC,KAAKR,aAC/CF,eAAe6D,QAAQ,eAAgBpD,EAAIC,KAAKoD,cAChD9D,eAAe6D,QAAQ,SAAUpD,EAAIC,KAAKqD,QAC1ClD,QAAQC,IAAI,uDACZyC,GAAS,GACTE,GAAU,GAZE,kDAcZnB,MAAM,gBACNzB,QAAQC,IAAI,oCAAZ,MAfY,0DAAH,sDAmBb,OACE,yBAAKnC,UAAU,SACb,yBAAKA,UAAU,aACb,yDACA,kBAAC,IAAD,eACEqF,KAAK,eACLrF,UAAU,aACVsF,cAAe,CAAEC,UAAU,GAC3BC,SAAUT,GACNV,GAEJ,kBAAC,IAAKoB,KAAN,CACEJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,CACEC,OAAQ,kBAACC,EAAA,EAAD,CAAc9F,UAAU,wBAChCE,YAAY,cAGhB,kBAAC,IAAKuF,KAAN,CACEJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCACnC5C,MAAO,CAAE+C,aAAc,SAEvB,kBAAC,IAAD,CACEF,OAAQ,kBAACG,EAAA,EAAD,CAAchG,UAAU,wBAChCC,KAAK,WACLC,YAAY,cAIhB,kBAAC,IAAKuF,KAAShB,EACb,kBAAC,IAAD,CACExE,KAAK,UACLgG,SAAS,SACTjD,MAAO,CAAEkD,YAAa,QAHxB,UAOA,kBAAC,IAAD,CACEjG,KAAK,UACLQ,QAjEO,WACjBmE,EAAS,SAiEC5B,MAAO,CAAEmD,WAAY,QAHvB,WASJ,kBAAC,IAAD,CAASnD,MAAO,CAAEC,MAAO,YAAzB,mBACA,kBAAC,IAAD,CAAQD,MAAO,CAAEoD,MAAO,OAAS3F,QAASoE,GAA1C,kC,SCnFFR,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEhBE,EAAa,CACjBD,WAAY,CAAED,KAAM,KAkFP8B,EA/EE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAa1B,EAAe,EAAfA,SAMzB2B,EAAQ,uCAAG,WAAOvB,GAAP,SAAAC,EAAA,+EAEPxD,IAAMC,KAAK,sCAAuCsD,GAF3C,OAGbrB,MAAM,gEACN2C,GAAY,GACZ1B,GAAS,GALI,gDAObjB,MACE,mFARW,yDAAH,sDAad,OACE,yBAAK3D,UAAU,SACb,yBAAKA,UAAU,YAAYgD,MAAO,CAAEgB,SAAU,aAC5C,8CACA,kBAAC,IAAD,iBAAUK,EAAV,CAAkBgB,KAAK,QAAQG,SAAUe,IACvC,kBAAC,IAAKd,KAAN,CACEe,MAAM,WACNnB,KAAK,WACLK,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qDAIb,kBAAC,IAAD,OAGF,kBAAC,IAAKH,KAAN,CACEe,MAAM,WACNnB,KAAK,WACLK,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qDAIb,kBAAC,IAAMa,SAAP,OAGF,kBAAC,IAAKhB,KAAShB,EACb,kBAAC,IAAD,CACExE,KAAK,UACLgG,SAAS,SACTjD,MAAO,CAAEkD,YAAa,QAHxB,UAOA,kBAAC,IAAD,CACEjG,KAAK,UACLQ,QA3DU,WACpB6F,GAAY,IA2DFtD,MAAO,CAAEmD,WAAY,QAHvB,WASJ,kBAACO,EAAA,EAAD,CACE1G,UAAU,cACVS,QAAS,WACP6F,GAAY,GACZ1B,GAAS,S,kBCAN+B,EA/EM,WACnB,IAAMxF,EAAW,CAAEC,SAAUC,eAAeC,QAAQ,WAD3B,EAEmBkC,mBAAS,IAF5B,mBAElBoD,EAFkB,KAEFC,EAFE,KAGnBtF,EAAcF,eAAeC,QAAQ,eAE3CwF,qBAAU,WAERC,MACC,IAEH,IAAMA,EAAqB,WAGzBtF,IACGC,KAAK,qDAAsDP,EAAU,CACpEQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,QACX6E,EAAkB/E,EAAIC,KAAKiF,WAE3B9E,QAAQC,IAAI,sCA2BpB,OACE,yBAAKnC,UAAU,YACZ4G,EAAe1D,KAAI,SAAC+D,EAAOC,GAC1B,OACE,6BACE,yBAAKlH,UAAU,gBACb,yBAAKwC,IAAKyE,EAAM1D,YAAab,IAAI,KAChCuE,EAAM3D,WACP,yBAAKtD,UAAU,iBACb,kBAAC,IAAD,CAASmH,MAAM,UACb,kBAAC,IAAD,CACEC,MAAM,SACNC,KACE,kBAACC,EAAA,EAAD,CACE7G,QAAS,kBApCT,SAACQ,GACrB,IAAME,EAAW,CACfF,QAASA,EACTG,SAAUC,eAAeC,QAAQ,WAGnCG,IACGC,KAAK,uDAAwDP,EAAU,CACtEQ,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACDA,EAAIC,KAAKC,SACX+E,IACA7E,QAAQC,IAAI,6BAEZD,QAAQC,IAAI,mFAmBiBoF,CAAcN,EAAMhG,YAGvCuG,QAAM,aC+IXC,MA7Mf,WAAgB,IAAD,EACiBjE,mBAAS,CACrC2D,MAAO,GACPtE,QAAS,GACT6E,SAAU,KAJC,mBACNC,EADM,KACGC,EADH,OAOepE,oBAAS,GAPxB,mBAONJ,EAPM,KAOErC,EAPF,OASayC,oBAAS,GATtB,mBASNmB,EATM,KASCC,EATD,OAWmBpB,oBAAS,GAX5B,mBAWNqE,EAXM,KAWIvB,EAXJ,OAamB9C,oBAAS,GAb5B,mBAaNsE,EAbM,KAaIC,EAbJ,OAeevE,oBAAS,GAfxB,mBAeNwE,EAfM,KAeElD,EAfF,OAiBetB,oBAAS,GAjBxB,mBAiBNtC,EAjBM,KAiBGF,EAjBH,KAoBPR,EAAWyH,mBAEXC,EAAS,2CAWT5H,EAAS,SAAC6H,GAEd1G,IAAM2G,IAAIF,EAAS,MAAQP,EAAQR,OAAOtF,MAAK,YAAe,IACtDwG,EADqD,EAAXtG,KACrBjC,QAAU,CAAC,GAGtC8H,GAAW,SAACU,GACV,OAAO,eAAKA,EAAZ,CAAuBzF,QAASwF,WA6ChCE,EAAY,uCAAG,oCAAAtD,EAAA,sEAGX1D,EAAcF,eAAeC,QAAQ,eAH1B,SAMCG,IAAM2G,IAAI,oCAAqC,CAC/DzG,QAAS,CACPC,cAAc,UAAD,OAAYL,MARZ,OAMXO,EANW,OAWjBI,QAAQC,IAAI,2BAAkBL,GAE9BiG,GAAaD,GAbI,uDAejBnE,MAAM,kBAGAwB,EAAe9D,eAAeC,QAAQ,gBAlB3B,UAoBCG,IAAMC,KAAK,wCAAyC,CACpE8G,MAAOrD,IArBQ,eAoBXrD,EApBW,OAyBXP,EAAcO,EAAIC,KAAKR,YAE7BF,eAAe6D,QAAQ,cAAe3D,GA3BrB,UA6BXE,IAAM2G,IAAI,oCAAqC,CACnDzG,QAAS,CACPC,cAAc,UAAD,OAAYL,MA/BZ,yDAAH,qDAuCZkH,EAAM,uCAAG,8BAAAxD,EAAA,6DACPE,EAAe9D,eAAeC,QAAQ,gBAD/B,kBAGOG,IAAMiH,OAAO,yCAA0C,CACvEF,MAAOrD,IAJE,OAGLrD,EAHK,OAMXT,eAAesH,WAAW,eAC1BtH,eAAesH,WAAW,gBAC1BtH,eAAesH,WAAW,UAC1B7D,GAAU,GACV5C,QAAQC,IAAI,kCAAeL,GAVhB,kDAYXI,QAAQC,IAAI,wCAAZ,MAZW,0DAAH,qDAgBZ,OACE,yBAAKnC,UAAU,YACF,IAAV2E,EACC,kBAAC,EAAD,CACEA,MAAOA,EACPC,SAAUA,EACVC,aApEa,WACnBD,GAAS,GACT0B,GAAY,IAmENA,YAAaA,EACbxB,UAAWA,IAEX,MAEU,IAAb+C,EACC,kBAAC,EAAD,CAAUvB,YAAaA,EAAa1B,SAAUA,IAC5C,KACJ,gCACE,yBAAK5E,UAAU,QAED,IAAXgI,EACC,0BAAMvH,QArFE,WAChBmE,GAAS,KAoFD,WAEA,0BAAMnE,QAASgI,GAAf,WAKF,0BAAMhI,QAAS8H,GAAf,sBAIJ,yBAAKvI,UAAU,cACb,wBAAIS,QA3GU,WAClBmH,EAAW,CACTT,MAAO,GACPtE,QAAS,GACT6E,SAAU,KAEZlH,EAASoI,QAAQC,QACjBrI,EAASoI,QAAQE,MAAQ,KAoGrB,oBAEY,IAAbhB,EAAoB,kBAAC,EAAD,MAAmB,KAExC,kBAAC,EAAD,CACE1H,YAvJc,SAAC+H,GACnB,IAAMY,EAAaZ,EAAEa,OAAOF,MAE5BlB,GAAW,SAACU,GACV,OAAO,eAAKA,EAAZ,CAAuBnB,MAAO4B,QAoJ5BzI,OAAQ,SAAC6H,GACO,UAAVA,EAAEhF,KACJ7C,KAGJI,aAAcJ,EACdE,SAAUA,IAEZ,kBAAC,EAAD,CACEqC,QAAS8E,EAAQ9E,QACjB/B,UA5IY,SAACmI,GACjBxH,IAAM2G,IAAIF,EAAS,MAAQe,GAAIpH,MAAK,YAAe,IAC3CqH,EAD0C,EAAXnH,KAGrC6F,GAAW,SAACU,GACV,OAAO,eAAKA,EAAZ,CAAuBZ,SAAUwB,UAGrChH,QAAQC,IAAIwF,EAAQD,WAqIhBtE,OAAQA,EACRrC,UAAWA,EACXC,SAAUA,EACVE,QAASA,KAEC,IAAXkC,EACC,kBAAC,EAAD,CACEP,QAAS8E,EAAQD,SACjB7D,WA3IW,WACjB+D,GAAW,SAACU,GACV,OAAO,eAAKA,EAAZ,CAAuBZ,SAAU,QAEnC3G,GAAU,IAwIJC,SAAUA,EACVE,QAASA,IAET,OCtMUiI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlI,MAAK,SAAAmI,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjI,QAAQiI,MAAMA,EAAMvE,c","file":"static/js/main.d226af68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <div className=\"searchbox-wrap\">\r\n      <div className=\"searchbox-in\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"영화제목은 영어로 검색하세요\"\r\n          className=\"searchbox\"\r\n          onChange={props.handleInput}\r\n          onKeyPress={props.search}\r\n          ref={props.inputRef}\r\n        />\r\n        <button onClick={props.handleButton}>\r\n          <SearchOutlined className=\"search-icon\" />\r\n          Search\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\n//====================================\r\n// Popup 열때마다 재렌더링\r\n//====================================\r\n\r\nconst Result = ({\r\n  result,\r\n  openPopup,\r\n  setToggle,\r\n  setClick,\r\n  isClick,\r\n  movieId,\r\n}) => {\r\n  const variable = {\r\n    userFrom: sessionStorage.getItem(\"userId\"),\r\n    movieId: movieId,\r\n  };\r\n  const accessToken = sessionStorage.getItem(\"accessToken\");\r\n\r\n  //검색후 나오는 영화를 눌렀을때 발생하는 이벤트\r\n  const popupToggle = () => {\r\n    openPopup(result.imdbID); // 데이터 가져온다\r\n    setToggle(true); //토글 true로 팝업창 띄운다\r\n    fetchLikeData(); //데이터 유무에 따라 하트 변화\r\n  };\r\n  // 영화검색후 나온 포스터 누를 때 API 요청\r\n  const fetchLikeData = () => {\r\n    axios\r\n      .post(\"http://localhost:5000/api/private/getLike\", variable, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.success) {\r\n          setClick(res.data.likeData); // 데이터 있으면 하트 On 없으면 하트Off\r\n          console.log(\"하트 \", res.data.success);\r\n        } else {\r\n          console.log(\"하트데이터 못불러옴\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Col lg={8} md={12} xs={12} className=\"result\">\r\n      <div onClick={popupToggle}>\r\n        <img src={result.Poster} alt=\"poster\" />\r\n      </div>\r\n      <div className=\"result-text\">\r\n        <h3>{result.Title}</h3>\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n\r\nfunction ResultList(props) {\r\n  if (props.results[0] === 1) {\r\n    return (\r\n      <div className=\"no-result\">\r\n        <SyncOutlined spin /> <br />\r\n        No results were found for your search.\r\n        <br />\r\n        Please <span style={{ color: \"#ff9800\" }}>check the words.</span>\r\n      </div>\r\n    );\r\n  } else\r\n    return (\r\n      <div className=\"resultlist-container\">\r\n        <div className=\"resultlist\">\r\n          <Row>\r\n            {props.results.map((result) => {\r\n              return (\r\n                <Result\r\n                  result={result}\r\n                  key={result.imdbID}\r\n                  openPopup={props.openPopup}\r\n                  toggle={props.toggle}\r\n                  setToggle={props.setToggle}\r\n                  setClick={props.setClick}\r\n                  isClick={props.isClick}\r\n                  movieId={result.imdbID}\r\n                />\r\n              );\r\n            })}\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ResultList;\r\n","import React, { useState } from \"react\";\r\nimport Heart from \"react-animated-heart\";\r\nimport axios from \"axios\";\r\n\r\nconst Favorite = ({\r\n  userFrom,\r\n  movieId,\r\n  movieTitle,\r\n  moviePoster,\r\n  setClick,\r\n  isClick,\r\n}) => {\r\n  const [favorited, setFavorited] = useState(true);\r\n\r\n  const variable = {\r\n    userFrom: sessionStorage.getItem(\"userId\"),\r\n    movieId: movieId,\r\n    movieTitle: movieTitle,\r\n    moviePoster: moviePoster,\r\n  };\r\n  const accessToken = sessionStorage.getItem(\"accessToken\");\r\n\r\n  //  좋아요를 누른 기록이 있으면 favorited => true\r\n  axios\r\n    .post(\"http://localhost:5000/api/private/favorited\", variable, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      if (res.data.success) {\r\n        // 데이터 있으면 favorited=>true , 없으면 favorited=>false\r\n        setFavorited(res.data.favorited);\r\n      } else {\r\n        alert(\"Favorite 정보 가져오지 못함!\");\r\n      }\r\n    });\r\n\r\n  // ===================================\r\n  //   하트를 눌렀을때 발생하는 이벤트\r\n  // ===================================\r\n  const onClickFavorite = () => {\r\n    // 좋아요를 이미 눌렀을 경우(favorited가 true일때)\r\n    if (favorited) {\r\n      axios\r\n        .post(\r\n          \"http://localhost:5000/api/private/removeFromFavorite\",\r\n          variable,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            setClick(!favorited);\r\n            setFavorited(!favorited);\r\n          } else {\r\n            console.log(\"favorite콜렉션에서 제거하지 못함\");\r\n          }\r\n        });\r\n    } else {\r\n      // 좋아요 최초로 누를 경우 : variable 정보를 FavoritePage로 넘김.\r\n      // favorited가 false인 경우\r\n      axios\r\n        .post(\"http://localhost:5000/api/private/addToFavorite\", variable, {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            setClick(!favorited);\r\n            setFavorited(!favorited);\r\n          } else {\r\n            console.log(\"추가하지 못했습니다\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"App\">\r\n        <Heart isClick={isClick} onClick={onClickFavorite} />\r\n        <div className=\"add\">Add to Favorite!</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorite;\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport Favorite from \"./Section/Favorite\";\r\n\r\nfunction Popup({ results, closePopup, setClick, isClick }) {\r\n  return (\r\n    <div className=\"popup\">\r\n      <div className=\"btn-position\">\r\n        <h2>\r\n          {results.Title} ({results.Year})\r\n        </h2>\r\n        <div style={{ display: \"flex\", position: \"relative\" }}>\r\n          <div>\r\n            <p className=\"rating\">Rating : {results.imdbRating}</p>\r\n          </div>\r\n          <Favorite\r\n            userFrom={sessionStorage.getItem(\"userId\")}\r\n            movieId={results.imdbID}\r\n            movieTitle={results.Title}\r\n            moviePoster={results.Poster}\r\n            setClick={setClick}\r\n            isClick={isClick}\r\n          />\r\n        </div>\r\n        <div className=\"poster\">\r\n          <img src={results.Poster} alt=\"\" />\r\n          <div className=\"poster-right\">\r\n            <p>\r\n              <span>PLOT</span> <br />\r\n              {results.Plot}\r\n            </p>\r\n            <p>\r\n              <span>DIRECTOR</span> <br />\r\n              {results.Director}\r\n            </p>\r\n            <p>\r\n              <span>ACTOR</span> <br />\r\n              {results.Actors}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"close-popup\">\r\n          <Button type=\"primary\" onClick={closePopup}>\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport { Form, Input, Button, Divider } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nconst layout = {\r\n  labelCol: { span: 24 },\r\n  wrapperCol: { span: 24 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { span: 24 },\r\n};\r\n\r\nconst Login = ({ login, setLogin, openRegister, setChange }) => {\r\n  // 닫기창 누르면 로그인창 닫힘\r\n  const closeLogin = () => {\r\n    setLogin(\"none\");\r\n  };\r\n  // 로그인 요청\r\n  const onLogin = async (values) => {\r\n    try {\r\n      const res = await axios.post(\r\n        \"http://localhost:5000/api/users/login\",\r\n        values\r\n      );\r\n      // 서버에서 res.json과 같은 형태로 전송을 해야 클라이언트에서 사용 가능!!\r\n      sessionStorage.setItem(\"accessToken\", res.data.accessToken);\r\n      sessionStorage.setItem(\"refreshToken\", res.data.refreshToken);\r\n      sessionStorage.setItem(\"userId\", res.data.userId);\r\n      console.log(\"로그인 및 요청 성공\");\r\n      setLogin(false); // 로그인 창 닫기\r\n      setChange(false); // sign-in => log out 글자 바꿈\r\n    } catch (err) {\r\n      alert(\"Login failed\");\r\n      console.log(\"로그인에러 : \", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login-box\">\r\n        <h2>Enjoy Our Movie Database!</h2>\r\n        <Form\r\n          name=\"normal_login\"\r\n          className=\"login-form\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onLogin}\r\n          {...layout}\r\n        >\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n          >\r\n            <Input\r\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Username\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n            style={{ marginBottom: \"30px\" }}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{ marginRight: \"5px\" }}\r\n            >\r\n              Log in\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={closeLogin}\r\n              style={{ marginLeft: \"5px\" }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        <Divider style={{ color: \"#767676\" }}>New to MovieDB?</Divider>\r\n        <Button style={{ width: \"80%\" }} onClick={openRegister}>\r\n          Create your MovieDB account\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nconst layout = {\r\n  labelCol: { span: 5 },\r\n  wrapperCol: { span: 19 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { span: 24 },\r\n};\r\n\r\nconst Register = ({ setRegister, setLogin }) => {\r\n  const closeRegister = () => {\r\n    setRegister(false);\r\n  };\r\n\r\n  // onSubmit 이벤트에서 async await => try, catch하지 않을경우 에러발생시 화면나감\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      await axios.post(\"http://localhost:5000/api/users/add\", values);\r\n      alert(\"You have successfully registered as a member. Please log in.\");\r\n      setRegister(false);\r\n      setLogin(true);\r\n    } catch (error) {\r\n      alert(\r\n        \"Is your ID or password more than 3 characters long?\\nOr your ID already exists.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login-box\" style={{ position: \"relative\" }}>\r\n        <h2>Create account</h2>\r\n        <Form {...layout} name=\"basic\" onFinish={onSubmit}>\r\n          <Form.Item\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your username!(At least 3 string.)\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your password!(At least 3 string.)\",\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              style={{ marginRight: \"5px\" }}\r\n            >\r\n              Submit\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={closeRegister}\r\n              style={{ marginLeft: \"5px\" }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        <ArrowLeftOutlined\r\n          className=\"backToLogin\"\r\n          onClick={() => {\r\n            setRegister(false);\r\n            setLogin(true);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Button, Tooltip } from \"antd\";\r\n\r\nconst FavoritePage = () => {\r\n  const variable = { userFrom: sessionStorage.getItem(\"userId\") };\r\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\r\n  const accessToken = sessionStorage.getItem(\"accessToken\");\r\n\r\n  useEffect(() => {\r\n    // 렌더링 될때마다 movie list 업데이트함\r\n    fetchFavoriteMovie();\r\n  }, []);\r\n\r\n  const fetchFavoriteMovie = () => {\r\n    // variable변수통해 userFrom에 대한 데이터를 favorites 로 가져옴\r\n    // favoriteMovies 배열에 데이터 넣음\r\n    axios\r\n      .post(\"http://localhost:5000/api/private/getFavoriteMovie\", variable, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.success) {\r\n          setFavoriteMovies(res.data.favorites);\r\n        } else {\r\n          console.log(\"Failed to get favorited videos\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const onClickRemove = (movieId) => {\r\n    const variable = {\r\n      movieId: movieId,\r\n      userFrom: sessionStorage.getItem(\"userId\"),\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/api/private/removeFromFavorite\", variable, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        if (res.data.success) {\r\n          fetchFavoriteMovie();\r\n          console.log(\"삭제성공\");\r\n        } else {\r\n          console.log(\"favorite콜렉션에서 제거하지 못함\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"favorite\">\r\n      {favoriteMovies.map((movie, index) => {\r\n        return (\r\n          <div>\r\n            <div className=\"favorite-box\">\r\n              <img src={movie.moviePoster} alt=\"\" />\r\n              {movie.movieTitle}\r\n              <div className=\"favorite-icon\">\r\n                <Tooltip title=\"Delete\">\r\n                  <Button\r\n                    shape=\"circle\"\r\n                    icon={\r\n                      <DeleteOutlined\r\n                        onClick={() => onClickRemove(movie.movieId)}\r\n                      />\r\n                    }\r\n                    danger\r\n                  />\r\n                </Tooltip>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FavoritePage;\r\n","import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ResultList from \"./components/ResultList\";\nimport Popup from \"./components/Popup\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport FavoritePage from \"./components/FavoritePage\";\n\nfunction App() {\n  const [moviedb, setMoviedb] = useState({\n    title: \"\",\n    results: [],\n    selected: {},\n  });\n  // popup창 토글\n  const [toggle, setToggle] = useState(false);\n  // login Display 띄우기\n  const [login, setLogin] = useState(false);\n  // register Display 띄우기\n  const [register, setRegister] = useState(false);\n  // favorite Display 띄우기\n  const [favorite, setFavorite] = useState(false);\n  // 로그인 => 로그아웃 글자 변경\n  const [change, setChange] = useState(true);\n  // 좋아요 하트버튼 On/oFF\n  const [isClick, setClick] = useState(false);\n\n  // search 검색창 포커스\n  const inputRef = useRef();\n\n  const apiURL = \"https://www.omdbapi.com/?apikey=ec6e8a00\";\n\n  // 검색하는 영화제목 담기\n  const handleInput = (e) => {\n    const typedTitle = e.target.value;\n\n    setMoviedb((prevState) => {\n      return { ...prevState, title: typedTitle };\n    });\n  };\n  // 엔터 누른 후 state에 API 저장하기\n  const search = (e) => {\n    // if (e.key === \"Enter\") {\n    axios.get(apiURL + \"&s=\" + moviedb.title).then(({ data }) => {\n      const searchResults = data.Search || [1];\n      // 받아온 Search 데이터가 없을경우 [1]을 할당\n\n      setMoviedb((prevState) => {\n        return { ...prevState, results: searchResults };\n      });\n    });\n    // }\n  };\n\n  // Result를 누를 시 ID기반 정보 API moviedb에 저장\n  const openPopup = (id) => {\n    axios.get(apiURL + \"&i=\" + id).then(({ data }) => {\n      const popupResult = data;\n\n      setMoviedb((prevState) => {\n        return { ...prevState, selected: popupResult };\n      });\n    });\n    console.log(moviedb.selected);\n  };\n  const closePopup = () => {\n    setMoviedb((prevState) => {\n      return { ...prevState, selected: {} };\n    });\n    setToggle(false);\n  };\n  // 메인 타이틀 텍스트 누르면 화면 리셋 후 input에 포커싱\n  const screenReset = () => {\n    setMoviedb({\n      title: \"\",\n      results: [],\n      selected: {},\n    });\n    inputRef.current.focus();\n    inputRef.current.value = \"\";\n  };\n  // 로그인 화면 열기\n  const openLogin = () => {\n    setLogin(true);\n  };\n  // 회원가입 화면 열기\n  const openRegister = () => {\n    setLogin(false);\n    setRegister(true);\n  };\n  //====================================\n  // 로그인 이후 private 접근 경로 설정\n  //====================================\n  const openFavorite = async () => {\n    try {\n      // 세션스토리지에 담긴 accessToken을 찾는다\n      const accessToken = sessionStorage.getItem(\"accessToken\");\n\n      // access token을 헤더에 담아서 private경로 요청\n      const res = await axios.get(\"http://localhost:5000/api/private\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      console.log(\"favorite 모달 : \", res);\n      // 에러발생안하면 Favorite리스트 열고 닫기 가능\n      setFavorite(!favorite);\n    } catch (err) {\n      alert(\"Please Log in!\");\n      // console.log(\"토큰갱신에러\", err);\n      // 세션스토리지에 담긴 refreshToken을 찾는다\n      const refreshToken = sessionStorage.getItem(\"refreshToken\");\n      // private경로 요청 에러시, users/token 경로로 refresh token을 담아서 요청\n      const res = await axios.post(\"http://localhost:5000/api/users/token\", {\n        token: refreshToken,\n      });\n      // console.log(\"재요청 : \", res);\n      // 요청통해 전달받은 accessToken을 새로운 accessToken으로 선언\n      const accessToken = res.data.accessToken;\n      // 세션스토리지에 저장\n      sessionStorage.setItem(\"accessToken\", accessToken);\n      // private경로 재요청\n      await axios.get(\"http://localhost:5000/api/private\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n    }\n  };\n  //====================================\n  // 로그아웃 요청\n  //====================================\n  const logout = async () => {\n    const refreshToken = sessionStorage.getItem(\"refreshToken\");\n    try {\n      const res = await axios.delete(\"http://localhost:5000/api/users/logout\", {\n        token: refreshToken,\n      });\n      sessionStorage.removeItem(\"accessToken\");\n      sessionStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"userId\");\n      setChange(true);\n      console.log(\"로그아웃 res : \", res);\n    } catch (err) {\n      console.log(\"로그아웃 에러\", err);\n    }\n  };\n\n  return (\n    <div className=\"moviedb\">\n      {login === true ? (\n        <Login\n          login={login}\n          setLogin={setLogin}\n          openRegister={openRegister}\n          setRegister={setRegister}\n          setChange={setChange}\n        />\n      ) : null}\n\n      {register === true ? (\n        <Register setRegister={setRegister} setLogin={setLogin} />\n      ) : null}\n      <header>\n        <div className=\"nav\">\n          {/* 로그인시 글자 바뀜 */}\n          {change === true ? (\n            <span onClick={openLogin}>Sign-In</span>\n          ) : (\n            <span onClick={logout}>Log-Out</span>\n          )}\n          {/* <span onClick={openLogin}>Sign-In</span>\n          <span>Log-Out</span> */}\n\n          <span onClick={openFavorite}>My Favorite List</span>\n        </div>\n      </header>\n\n      <div className=\"page-title\">\n        <h1 onClick={screenReset}>Movie Database</h1>\n      </div>\n      {favorite === true ? <FavoritePage /> : null}\n\n      <Search\n        handleInput={handleInput}\n        search={(e) => {\n          if (e.key === \"Enter\") {\n            search();\n          }\n        }}\n        handleButton={search}\n        inputRef={inputRef}\n      />\n      <ResultList\n        results={moviedb.results}\n        openPopup={openPopup}\n        toggle={toggle}\n        setToggle={setToggle}\n        setClick={setClick}\n        isClick={isClick}\n      />\n      {toggle === true ? (\n        <Popup\n          results={moviedb.selected}\n          closePopup={closePopup}\n          setClick={setClick}\n          isClick={isClick}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}